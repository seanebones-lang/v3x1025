name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr poppler-utils libmagic1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist safety

    - name: Security check - Dependencies
      run: |
        pip check
        safety check --json || true

    - name: Run linting
      run: |
        pip install ruff
        ruff check src/ tests/ || true

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --strict --warn-redundant-casts --warn-unused-ignores || true

    - name: Run tests with coverage
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        VOYAGE_API_KEY: ${{ secrets.VOYAGE_API_KEY }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
      run: |
        pytest tests/ -v --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=80

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t dealership-rag:${{ github.sha }} .

    - name: Test Docker image
      run: |
        docker run --rm dealership-rag:${{ github.sha }} python -c "import src; print('Image OK')"

