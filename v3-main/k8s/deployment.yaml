# Blue1 RAG System - Production Kubernetes Deployment
# Optimized for 4-location automotive dealership (400+ concurrent users)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blue1-api
  namespace: blue1-system
  labels:
    app: blue1-api
    tier: application
spec:
  replicas: 6  # 6 replicas for high availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: blue1-api
  template:
    metadata:
      labels:
        app: blue1-api
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      # Anti-affinity to spread pods across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - blue1-api
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: blue1-api
        image: blue1/rag-system:latest
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: metrics
        
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: WORKERS
          value: "4"  # 4 workers per pod
        
        envFrom:
        - configMapRef:
            name: blue1-config
        - secretRef:
            name: blue1-secrets
        
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe for slow initialization
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12
          successThreshold: 1
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL

---
# Horizontal Pod Autoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: blue1-api-hpa
  namespace: blue1-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: blue1-api
  minReplicas: 6
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60

---
# Service for load balancing
apiVersion: v1
kind: Service
metadata:
  name: blue1-api-service
  namespace: blue1-system
  labels:
    app: blue1-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: metrics
  selector:
    app: blue1-api

---
# NGINX Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: blue1-api-ingress
  namespace: blue1-system
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-burst: "20"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - your-domain.com
    secretName: blue1-tls
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blue1-api-service
            port:
              number: 80

---
# Pod Disruption Budget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: blue1-api-pdb
  namespace: blue1-system
spec:
  minAvailable: 4  # Always keep at least 4 pods running
  selector:
    matchLabels:
      app: blue1-api