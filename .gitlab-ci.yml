# GitLab CI/CD Pipeline Configuration
# For teams using GitLab instead of GitHub Actions

stages:
  - test
  - build
  - security
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  PYTHON_VERSION: "3.12"

# Test stage
test:unit:
  stage: test
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest-xdist ruff mypy
  script:
    - echo "Running linting..."
    - ruff check src/ tests/ || true
    - echo "Running type checking..."
    - mypy src/ --ignore-missing-imports || true
    - echo "Running unit tests..."
    - pytest tests/ -v --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=80
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
    expire_in: 1 week
  only:
    - branches
    - merge_requests

# Security scan stage
security:dependencies:
  stage: security
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install safety bandit
  script:
    - echo "Checking for known vulnerabilities..."
    - safety check --json || true
    - echo "Running security linter..."
    - bandit -r src/ -f json -o bandit-report.json || true
  artifacts:
    paths:
      - bandit-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - branches
    - merge_requests

# Docker build stage
build:docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - echo "Testing Docker image..."
    - docker run --rm $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA python -c "import src; print('Image OK')"
    - echo "Pushing Docker image..."
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop

# Deploy to staging
deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - echo "Image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    # Add your deployment commands here
    # Example: kubectl set image deployment/dealership-rag app=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  environment:
    name: staging
    url: https://staging.dealership-rag.example.com
  only:
    - develop
  when: manual

# Deploy to production
deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - echo "Image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    # Add your production deployment commands here
  environment:
    name: production
    url: https://dealership-rag.example.com
  only:
    - main
  when: manual

