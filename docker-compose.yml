version: '3.8'

services:
  # Main FastAPI application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dealership-rag-api
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and Celery broker
  redis:
    image: redis:7.4-alpine
    container_name: dealership-rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dealership-rag-celery-worker
    command: celery -A src.tasks.celery_app worker --loglevel=info
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "celery -A src.tasks.celery_app inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dealership-rag-celery-beat
    command: celery -A src.tasks.celery_app beat --loglevel=info
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rag-network

volumes:
  redis-data:

networks:
  rag-network:
    driver: bridge

